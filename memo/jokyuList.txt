101 O ... 二次元座標圧縮 & いもす法. 添字がややこしいが理解した.
102 O ... 簡単
103 O ... 時間かかった. unordered_mapを毎回引くのは40倍遅い.
104 O ... 時間かかった. 範囲の問題は「入る」「出る」がどんな意味なのかちゃんと確認すべし
105 O ... デバッグできてる自信なかったけど一発で通った。。
106 O ... 解くのが遅かった. 何か練習を工夫する必要がある..
107 O ... 解くのが遅かった. こんがらがるなあ. 他の人の解法研究せよ。
108 X
109 O
110 O ... 普通に累乗を書いたら間に合った。TLEが厳しいとはどういう意味だ？
111 O ... コピペ
112 O ... てんぷらさんの解答を学んでAC. ダブリングを覚えた. うまくできているなあ...
113 O ... 実装ではまる. ちゃんとアルゴリズムを設計せず, デバッグしながら考える感じだった. 自分の課題が浮き彫りに...
114 X
115 O
116 O ... 初Grundy数. 漸化式の仕組みで見落とし。添字が増える系は怖い. [101][101] <- [100][102] <- ... [0][202] !! (<- は依存関係) だから, ２つめの添字は202まで必要！！！
117 X
118 O
119 O ... ロリハで1.7sec. ちょっとTLEが心配.
120 O
121 O
122 O ... １．平方分割を覚えた。２．setでも解いてみた。s.lower_bound(v)を使うべし。lower_bound(s.begin(), s.end(), v)はTLE
123 O ... Rubyでやってみた。書きやすい。Array.newでも複製参照ではまった。初期化はループでやったほうが無難。
124 O ... max flowを覚えた. 蟻本と https://www.slideshare.net/hcpc_hokudai/max-flow がわかりやすい
125 X
126 O ... 二部グラフと知っていれば易しいが...
127 O ... コピペ.... 最小費用流とかDinicとかはもうちょっとうまくなってからでいいかなあ
128 O ... むしろgreedyでどうやるのか忘れた
129 O ... コピペであっさり. 始点と終点、枝をはる条件を間違えたり反省. 復習したほうがいいかなあ
130 O ... コピペであっさり. 主定理の証明わからず。最大独立集合とか点カバーの理論は体系的らしいので、時間あるとき勉強する.
131 X
132 O ... 初BIT. かんたーん. でも、本番はBITのデバッグ時間、思い出す時間がもったいないのでコピペでやろう.
133 O ... セグ木と比べて、セグ木の方がほんの少し直感的である印象(範囲を直接指定できること)。
134 O
135 X
136 O
137 O ... 解説ACも解説AC. やり直す必要あり.
138 X
139 O ... 初segment tree.  / 平方分割でも解けるはず（未）
140 O
141 O ... 初遅延seg tree. evalも含めて、問題に応じて気をつけて実装する必要がある
142 O
143 O ... ライブラリがあってもはまった...
144 X
145 X
146 X
147 O ... はまった...そしてTLEすれすれだったが, なんとか解けた. / 有理数偏角ソートがあるが... (kozimaさんのとか、速いやつを確認する。未)
148 O ... atan2を使わない double geovector な偏角ソートをゲット. ...コピペ. 考察は非自明...
149 O
150 O
